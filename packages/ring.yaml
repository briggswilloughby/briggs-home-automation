# =============================================================================
# PACKAGE: ring.yaml
# PURPOSE: Ring ding → play Sonos chime and flash Shelly shelves via Pyscript
# FIX: Python module owns the doorbell flow; YAML offers manual entry points.
#
# DEPENDS ON:
#   - Sonos players: media_player.kitchen, media_player.patio
#   - File at /config/www/dingdong.mp3 (served via media-source://media_source/local/dingdong.mp3)
#
# NOTES:
#   - The doorbell ding flow now lives in pyscript/apps/doorbell.py and exposes
#     pyscript.sonos_doorbell_chime_py + pyscript.shelves_doorbell_flash_py services.
#   - Legacy YAML automation/scripts were removed once the Pyscript handler became
#     authoritative to prevent duplicate flows, but the core chime script remains
#     here as a fallback/testing helper.
# =============================================================================

script:
  sonos_doorbell_chime:
    alias: Sonos - Doorbell Chime (Kitchen + Patio)
    mode: single
    variables:
      payload: >-
        {{
          dict(
            players=players | default(['media_player.kitchen', 'media_player.patio'], true),
            chime_url=chime_url | default('http://192.168.68.86:8123/local/dingdong.mp3', true),
            chime_vol=chime_vol | default(0.4, true),
            chime_len=chime_len | default('00:00:03', true)
          ) | tojson | from_json
        }}
    fields:
      players:
        description: Sonos speakers that should play the chime
        example: "media_player.kitchen"
        default:
          - media_player.kitchen
          - media_player.patio
        selector:
          entity:
            domain: media_player
            multiple: true
      chime_url:
        description: Media URL or media-source path for the chime clip
        example: "http://192.168.68.86:8123/local/dingdong.mp3"
        default: "http://192.168.68.86:8123/local/dingdong.mp3"  # /config/www/dingdong.mp3
        selector:
          text:
      chime_vol:
        description: Temporary volume level (0.0 - 1.0) while the chime plays
        example: 0.4
        default: 0.4
        selector:
          number:
            min: 0
            max: 1
            step: 0.01
      chime_len:
        description: How long to wait before restoring the Sonos snapshot
        example: "00:00:03"
        default: "00:00:03"
        selector:
          text:
    sequence:
      - service: pyscript.sonos_doorbell_chime_py
        data: "{{ payload }}"

  doorbell_ring_combo:
    alias: Doorbell - Chime + Shelves Flash (Pyscript)
    mode: single
    fields:
      players:
        description: Sonos speakers that should play the chime
        example: "media_player.kitchen"
        default:
          - media_player.kitchen
          - media_player.patio
        selector:
          entity:
            domain: media_player
            multiple: true
      chime_url:
        description: Media URL or media-source path for the chime clip
        example: "http://192.168.68.86:8123/local/dingdong.mp3"
        default: "http://192.168.68.86:8123/local/dingdong.mp3"
        selector:
          text:
      chime_vol:
        description: Temporary volume level (0.0 - 1.0) while the chime plays
        example: 0.4
        default: 0.4
        selector:
          number:
            min: 0
            max: 1
            step: 0.01
      chime_len:
        description: How long to wait before restoring the Sonos snapshot
        example: "00:00:03"
        default: "00:00:03"
        selector:
          text:
      flash_repeats:
        description: Number of red flashes to perform
        example: 3
        default: 3
        selector:
          number:
            min: 0
            max: 10
            step: 1
      flash_on_time_ms:
        description: Milliseconds each flash stays on/off
        example: 250
        default: 250
        selector:
          number:
            min: 50
            max: 2000
            step: 50
      flash_brightness_pct:
        description: Brightness percentage for the flash
        example: 50
        default: 50
        selector:
          number:
            min: 1
            max: 100
            step: 1
      flash_enabled:
        description: Toggle the shelves flash while keeping the chime
        default: true
        selector:
          boolean:
      guard_seconds:
        description: Cooldown to absorb duplicate presses
        example: 4
        default: 4
        selector:
          number:
            min: 0
            max: 30
            step: 0.5
    sequence:
      - service: pyscript.doorbell_ring_py
        data: >-
          {{ {
            'players': players,
            'chime_url': chime_url,
            'chime_vol': chime_vol,
            'chime_len': chime_len,
            'flash_repeats': flash_repeats,
            'flash_on_time_ms': flash_on_time_ms,
            'flash_brightness_pct': flash_brightness_pct,
            'flash_enabled': flash_enabled,
            'guard_seconds': guard_seconds
          } | tojson | from_json }}

automation:
  - alias: Ring → Ding-Dong (legacy YAML)
    initial_state: 'off'
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: event.front_door_ding   # state changes to a new timestamp each press
    variables:
      ring_attrs: "{{ trigger.to_state.attributes }}"
      ring_event_type: "{{ ring_attrs.get('event_type') }}"
      ring_raw_data: "{{ ring_attrs.get('event_data') }}"
      ring_parsed_data: "{{ ring_raw_data | from_json(default=dict()) if ring_raw_data is string else dict() }}"
      ring_data: "{{ ring_raw_data if ring_raw_data is mapping else (ring_parsed_data if ring_parsed_data is mapping else dict()) }}"
      ring_kind: "{{ ring_data.get('kind') }}"
      ring_state: "{{ ring_data.get('state') }}"
      ring_motion: "{{ ring_data.get('motion') }}"
      ring_button_state: "{{ ring_data.get('doorbellStatus') }}"
      ring_motion_clear: "{{ ring_motion in [none, false, 'false', 'False'] }}"
    condition:
      - condition: template
        value_template: >-
          {{ ring_event_type == 'ding'
             and (ring_kind is none or ring_kind in ['ding', 'doorbell', 'on_demand_ding', 'remote_ding'])
             and (ring_state is none or ring_state in ['ringing', 'starting', 'doorbell', 'button', 'on_demand']
                  or ring_button_state in ['ringing', 'pressed', 'start'])
             and ring_motion_clear }}

    action:
      - service: pyscript.sonos_doorbell_chime_py
      - delay: "00:00:04"        # absorb duplicates
  # Legacy guard: keep disabled while the Pyscript handler owns the event flow.
