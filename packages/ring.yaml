# =============================================================================
# PACKAGE: ring.yaml
# PURPOSE: Ring ding → flash Shelly shelves + play chime on Kitchen & Patio Sonos
# FIX: Snapshot coordinators, bump volumes, play the clip, then restore for a reliable chime.
#
# DEPENDS ON:
#   - Shelly shelves package providing script.shelves_doorbell_flash
#   - Sonos players: media_player.kitchen, media_player.patio
#   - File at /config/www/dingdong.mp3 (served via media-source://media_source/local/dingdong.mp3)
#
# NOTES:
#   - All steps use `service:` (canonical). UI may say “Actions”, YAML uses `service`.
#   - If you prefer a direct URL, swap chime_url to
#       http://<HA-IP>:8123/local/dingdong.mp3
#     and keep media_content_type: music.
# =============================================================================

script:
  sonos_doorbell_chime:
    alias: Sonos - Doorbell Chime (Kitchen + Patio)
    mode: single
    variables:
      players:
        - media_player.kitchen
        - media_player.patio
      chime_url: "media-source://media_source/local/dingdong.mp3"  # /config/www/dingdong.mp3
      chime_vol: 0.40
      chime_len: "00:00:03"
    sequence:
      - variables:
          player_list: |-
            {% set candidate = players | default([], true) %}
            {% if candidate is mapping and 'entity_id' in candidate %}
              {% set candidate = candidate.entity_id %}
            {% endif %}
            {% if candidate is none %}
              {% set items = [] %}
            {% elif candidate is iterable and candidate is not string %}
              {% set items = candidate | list %}
            {% else %}
              {% set items = [candidate] %}
            {% endif %}
            {% set ns = namespace(result=[]) %}
            {% for item in items %}
              {% if item is mapping and 'entity_id' in item %}
                {% set inner = item.entity_id %}
                {% if inner is iterable and inner is not string %}
                  {% for entity in inner %}
                    {% if entity is not none %}
                      {% set ns.result = ns.result + [entity | string] %}
                    {% endif %}
                  {% endfor %}
                {% elif inner is not none %}
                  {% set ns.result = ns.result + [inner | string] %}
                {% endif %}
              {% elif item is iterable and item is not string %}
                {% for entity in item %}
                  {% if entity is not none %}
                    {% set ns.result = ns.result + [entity | string] %}
                  {% endif %}
                {% endfor %}
              {% elif item is not none %}
                {% set ns.result = ns.result + [item | string] %}
              {% endif %}
            {% endfor %}
            {{ ns.result | list }}
      - variables:
          coordinator_list: |-
            {% set items = player_list | default([], true) %}
            {% if items is none %}
              {% set items = [] %}
            {% elif items is string %}
              {% set items = [items] %}
            {% endif %}
            {% set ns = namespace(result=[]) %}
            {% for raw in items %}
              {% set entity = raw %}
              {% if entity is mapping and 'entity_id' in entity %}
                {% set entity = entity.entity_id %}
              {% endif %}
              {% if entity is iterable and entity is not string %}
                {% set entity_list = entity | list %}
              {% else %}
                {% set entity_list = [entity] %}
              {% endif %}
              {% for candidate in entity_list %}
                {% if candidate is not none %}
                  {% set name = candidate | string %}
                  {% set chosen = name %}
                  {% set coordinator = state_attr(name, 'coordinator') %}
                  {% if coordinator is string and coordinator | length > 0 and coordinator.startswith('media_player.') %}
                    {% set chosen = coordinator %}
                  {% else %}
                    {% set group = state_attr(name, 'sonos_group') %}
                    {% if group is iterable and group is not string and group | length > 0 %}
                      {% set first = group[0] %}
                      {% if first is string and first.startswith('media_player.') %}
                        {% set chosen = first %}
                      {% endif %}
                    {% endif %}
                  {% endif %}
                  {% if chosen not in ns.result %}
                    {% set ns.result = ns.result + [chosen] %}
                  {% endif %}
                {% endif %}
              {% endfor %}
            {% endfor %}
            {{ ns.result | list }}
      - variables:
          volume_targets: |-
            {% set base = player_list | default([], true) %}
            {% if base is none %}
              {% set base = [] %}
            {% elif base is string %}
              {% set base = [base] %}
            {% endif %}
            {% set extras = coordinator_list | default([], true) %}
            {% if extras is none %}
              {% set extras = [] %}
            {% elif extras is string %}
              {% set extras = [extras] %}
            {% endif %}
            {% set ns = namespace(result=[]) %}
            {% for entity in base + extras %}
              {% if entity is mapping and 'entity_id' in entity %}
                {% set pool = entity.entity_id %}
                {% if pool is iterable and pool is not string %}
                  {% for nested in pool %}
                    {% if nested is not none %}
                      {% set name = nested | string %}
                      {% if name.startswith('media_player.') and name not in ns.result %}
                        {% set ns.result = ns.result + [name] %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% elif pool is not none %}
                  {% set name = pool | string %}
                  {% if name.startswith('media_player.') and name not in ns.result %}
                    {% set ns.result = ns.result + [name] %}
                  {% endif %}
                {% endif %}
              {% elif entity is iterable and entity is not string %}
                {% for nested in entity %}
                  {% if nested is not none %}
                    {% set name = nested | string %}
                    {% if name.startswith('media_player.') and name not in ns.result %}
                      {% set ns.result = ns.result + [name] %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
              {% elif entity is not none %}
                {% set name = entity | string %}
                {% if name.startswith('media_player.') and name not in ns.result %}
                  {% set ns.result = ns.result + [name] %}
                {% endif %}
              {% endif %}
            {% endfor %}
            {{ ns.result | list }}
      - condition: template
        value_template: "{{ volume_targets | length > 0 }}"
      - service: script.sonos_snapshot
        data:
          players: "{{ coordinator_list }}"
      - repeat:
          for_each: "{{ volume_targets }}"
          sequence:
            - service: media_player.volume_set
              target:
                entity_id: "{{ repeat.item }}"
              data:
                volume_level: "{{ chime_vol | float }}"
      - repeat:
          for_each: "{{ coordinator_list }}"
          sequence:
            - service: media_player.play_media
              target:
                entity_id: "{{ repeat.item }}"
              data:
                media_content_id: "{{ chime_url }}"
                media_content_type: music
            - delay: "00:00:00.20"
      - delay: "{{ chime_len }}"
      - service: script.sonos_restore_snapshot
        data:
          players: "{{ coordinator_list }}"

automation:
  - alias: Ring → Ding-Dong + Shelves Flash
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: event.front_door_ding   # state changes to a new timestamp each press
    condition:
      - condition: template
        value_template: >-
          {% set attrs = trigger.to_state.attributes %}
          {% set event_type = attrs.get('event_type') %}
          {% set raw_data = attrs.get('event_data') %}
          {% if raw_data is string %}
            {% set parsed = raw_data | from_json %}
            {% if parsed is mapping %}
              {% set data = parsed %}
            {% else %}
              {% set data = {} %}
            {% endif %}
          {% elif raw_data is mapping %}
            {% set data = raw_data %}
          {% else %}
            {% set data = {} %}
          {% endif %}
          {% set kind = data.get('kind') %}
          {% set state = data.get('state') %}
          {% set motion = data.get('motion') %}
          {% set button_state = data.get('doorbellStatus') %}
          {% set valid_states = ['ringing', 'starting', 'doorbell', 'button', 'on_demand'] %}
          {% set motion_clear = motion in [none, false, 'false', 'False'] %}
          {{ event_type == 'ding'
             and (kind is none or kind in ['ding', 'doorbell', 'on_demand_ding', 'remote_ding'])
             and (state is none or state in valid_states or button_state in ['ringing', 'pressed', 'start'])
             and motion_clear }}

    action:
      - service: script.shelves_doorbell_flash
      - delay: "00:00:00.15"     # tiny stagger so Shellys start before audio
      - service: script.sonos_doorbell_chime
      - delay: "00:00:04"        # absorb duplicates
